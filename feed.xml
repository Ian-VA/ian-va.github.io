<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ian-va.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ian-va.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-11T05:52:38+00:00</updated><id>https://ian-va.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">The Unpragmatic Programmer</title><link href="https://ian-va.github.io/blog/2025/death/" rel="alternate" type="text/html" title="The Unpragmatic Programmer"/><published>2025-08-10T19:39:00+00:00</published><updated>2025-08-10T19:39:00+00:00</updated><id>https://ian-va.github.io/blog/2025/death</id><content type="html" xml:base="https://ian-va.github.io/blog/2025/death/"><![CDATA[<p>Companies have been flying AI as their latest proud banners to signal efficiency. From <a href="https://www.mckinsey.com/capabilities/quantumblack/our-insights/seizing-the-agentic-ai-advantage">“agentic AI”</a> pushed by consultants to the undying “we’ll have AGI in 2 years, guys, trust me”, the closest metaphor I can think of to the AI hype is a pandemic, the vectors of which are LinkedIn and Sam Altman’s twitter posts.</p> <p>Many experienced software engineers are quick to point out the issues with shoving LLMs down everyone’s throats, while budding programmers are all too eager to feed their latest homework assignment into chatGPT. Who’s on the right side of history here?</p> <p>To be clear, I don’t dislike Artificial Intelligence. I sometimes use it for UIs I really don’t feel like doing, or boilerplate code that I’m confident has been rewritten a thousand times before (and would thus appear a thousand times in the latest illegally web-scraped LLM dataset). I’d even go as far to say I’m a fan of AI-assisted coding. Indeed, it would be a fool’s errand to say that AI-assisted coding is bad, just like it would have been a fool’s errand to say higher-level programming languages are bad when everyone was still toiling in Assembly.</p> <p><a href="https://en.wikipedia.org/wiki/Vibe_coding">Vibe coding</a>, however, is corrosive and dangerous. It leads to security vulnerabilities, dead code, performance issues, and unreadable slop. <a href="https://www.businessinsider.com/tea-app-data-breach-cybersecurity-ai-vibe-coding-safety-experts-2025-8">Take a look at Tea</a>: the vibe-coded app that left its user’s private information (pictures and driver’s licenses) accessible through a web browser.</p> <p>Vibe coding has given birth to a subset of software developers I call the “Unpragmatic Programmers”. The Unpragmatic Programmer knows nothing of the tools he uses, like a carpenter clueless about rulers; he veils cataclysmic technical debt with a clunky UI and flashy presentations; indeed, all he knows about computer science is the ramblings of a mathematical model injected with far too much money, like a 21st century Plato’s Cave. Never before has cutting corners, in education and in practice, been so unanimously celebrated.</p> <p>In a sea of half-baked projects, be the one who finishes something to completion. In a crowded classroom full of your classmates running their homework through chatGPT, do your assignments manually. In an office packed with Claude Code, tread carefully and think of yourself as the artist you are meant to be as a programmer. In a world of unpragmatic programmers, be a <a href="https://en.wikipedia.org/wiki/The_Pragmatic_Programmer">pragmatic one</a>.</p> <hr/>]]></content><author><name></name></author><category term="programming"/><category term="ai"/><summary type="html"><![CDATA[vibe coding, and Plato's allegory of the cave]]></summary></entry></feed>