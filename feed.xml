<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ian-va.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ian-va.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-12T20:33:39+00:00</updated><id>https://ian-va.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">The Unpragmatic Programmer</title><link href="https://ian-va.github.io/blog/2025/death/" rel="alternate" type="text/html" title="The Unpragmatic Programmer"/><published>2025-08-10T19:39:00+00:00</published><updated>2025-08-10T19:39:00+00:00</updated><id>https://ian-va.github.io/blog/2025/death</id><content type="html" xml:base="https://ian-va.github.io/blog/2025/death/"><![CDATA[<p>Companies have been flying AI as their latest proud banners to signal efficiency. From <a href="https://www.mckinsey.com/capabilities/quantumblack/our-insights/seizing-the-agentic-ai-advantage">“agentic AI”</a> pushed by consultants to the undying “we’ll have AGI in 2 years, guys, trust me”, the closest metaphor I can think of to the AI hype is a pandemic, the vectors of which are LinkedIn and Sam Altman’s twitter posts.</p> <p>Many experienced software engineers are quick to point out the issues with shoving LLMs down everyone’s throats, while budding programmers are all too eager to feed their latest homework assignment into chatGPT. Who’s on the right side of history here?</p> <p>To be clear, I don’t dislike Artificial Intelligence. I sometimes use it for UIs I really don’t feel like doing, or boilerplate code that I’m confident has been rewritten a thousand times before (and would thus appear a thousand times in the latest illegally web-scraped LLM dataset). I’d even go as far to say I’m a fan of AI-assisted coding. Indeed, it would be a fool’s errand to say that AI-assisted coding is bad, just like it would have been a fool’s errand to say higher-level programming languages are bad when everyone was still toiling in Assembly.</p> <p><a href="https://en.wikipedia.org/wiki/Vibe_coding">Vibe coding</a>, however, is corrosive and dangerous. It leads to security vulnerabilities, dead code, performance issues, and unreadable slop. <a href="https://www.businessinsider.com/tea-app-data-breach-cybersecurity-ai-vibe-coding-safety-experts-2025-8">Take a look at Tea</a>: the vibe-coded app that left its user’s private information (pictures and driver’s licenses) accessible through a web browser.</p> <p>Vibe coding has given birth to a subset of software developers I call the “Unpragmatic Programmers”. The Unpragmatic Programmer knows nothing of the tools he uses, like a carpenter clueless about rulers; he veils cataclysmic technical debt with a clunky UI and flashy presentations; indeed, all he knows about computer science is the ramblings of a mathematical model injected with far too much money, like a 21st century Plato’s Cave. Never before has cutting corners, in education and in practice, been so unanimously celebrated.</p> <p>Of course, maybe I’m an old geezer already and can’t get with the times. Let’s put the Unpragmatic Programmer lifestyle to the test.</p> <hr/> <h2 id="testing-the-manhattan-project">Testing the Manhattan Project</h2> <p>Sam Altman likened GPT-5 to the Manhattan Project in terms of its power and capacity for change. Let’s take him up on that and vibe-code a video streaming app.</p> <p>I first asked GPT-5 to give me a simple video streaming app in Python with file uploading functionality. The Manhattan Project returned this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">jsonify</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">werkzeug.utils</span> <span class="kn">import</span> <span class="n">secure_filename</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="n">UPLOAD_FOLDER</span> <span class="o">=</span> <span class="sh">'</span><span class="s">uploads</span><span class="sh">'</span>
<span class="n">ALLOWED_EXTENSIONS</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">mp4</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">webm</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">mov</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">mkv</span><span class="sh">'</span><span class="p">}</span>
<span class="n">MAX_CONTENT_LENGTH</span> <span class="o">=</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span>  <span class="c1"># 1 GB
</span>
<span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">UPLOAD_FOLDER</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">UPLOAD_FOLDER</span>
<span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">MAX_CONTENT_LENGTH</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">MAX_CONTENT_LENGTH</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">UPLOAD_FOLDER</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">UPLOAD_FOLDER</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">allowed_file</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="k">return</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">filename</span> <span class="ow">and</span> <span class="n">filename</span><span class="p">.</span><span class="nf">rsplit</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nf">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="n">ALLOWED_EXTENSIONS</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/upload</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
    <span class="k">if</span> <span class="sh">'</span><span class="s">file</span><span class="sh">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">request</span><span class="p">.</span><span class="n">files</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">error</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">No file part</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">400</span>
    <span class="nb">file</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">files</span><span class="p">[</span><span class="sh">'</span><span class="s">file</span><span class="sh">'</span><span class="p">]</span>
    <span class="k">if</span> <span class="nb">file</span><span class="p">.</span><span class="n">filename</span> <span class="o">==</span> <span class="sh">''</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">error</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">No selected file</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">400</span>
    <span class="k">if</span> <span class="nb">file</span> <span class="ow">and</span> <span class="nf">allowed_file</span><span class="p">(</span><span class="nb">file</span><span class="p">.</span><span class="n">filename</span><span class="p">):</span>
        <span class="n">filename</span> <span class="o">=</span> <span class="nf">secure_filename</span><span class="p">(</span><span class="nb">file</span><span class="p">.</span><span class="n">filename</span><span class="p">)</span>
        <span class="n">filepath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">UPLOAD_FOLDER</span><span class="sh">'</span><span class="p">],</span> <span class="n">filename</span><span class="p">)</span>
        <span class="nb">file</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">success</span><span class="sh">'</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">'</span><span class="s">filename</span><span class="sh">'</span><span class="p">:</span> <span class="n">filename</span><span class="p">}),</span> <span class="mi">200</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">error</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Invalid file type</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">400</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">)</span>
</code></pre></div></div> <p>Okay. At first, this looks fine, but I can already point out an issue with the file uploading functionality: none of the functions, like <code class="language-plaintext highlighter-rouge">upload_file</code>, have any type hints. This becomes a problem if you’re working on code with other people, since the <code class="language-plaintext highlighter-rouge">upload_file</code> function returns a tuple without telling you. But I’ll let GPT-5 off the hook here, since this is more of a code quality issue.</p> <p>A more glaring issue is that this code doesn’t really implement GET request functionality, or a website. If I was a vibecoder, I’d want to access the app GPT-5 built for me on the browser – I wouldn’t know how to use CURL.</p> <p>Again, though, I can let GPT-5 off the hook for this, since my prompt may have been a little too basic. Let’s ask it to make a proper web UI that can be accessed through the browser:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HTML_FORM</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Video Upload&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Upload a Video&lt;/h1&gt;
    &lt;form method=</span><span class="sh">"</span><span class="s">post</span><span class="sh">"</span><span class="s"> enctype=</span><span class="sh">"</span><span class="s">multipart/form-data</span><span class="sh">"</span><span class="s">&gt;
      &lt;input type=</span><span class="sh">"</span><span class="s">file</span><span class="sh">"</span><span class="s"> name=</span><span class="sh">"</span><span class="s">file</span><span class="sh">"</span><span class="s"> accept=</span><span class="sh">"</span><span class="s">video/*</span><span class="sh">"</span><span class="s">&gt;
      &lt;input type=</span><span class="sh">"</span><span class="s">submit</span><span class="sh">"</span><span class="s"> value=</span><span class="sh">"</span><span class="s">Upload</span><span class="sh">"</span><span class="s">&gt;
    &lt;/form&gt;
    
  &lt;/body&gt;
&lt;/html&gt;
</span><span class="sh">"""</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
    <span class="n">message</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
        <span class="k">if</span> <span class="sh">'</span><span class="s">file</span><span class="sh">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">request</span><span class="p">.</span><span class="n">files</span><span class="p">:</span>
            <span class="n">message</span> <span class="o">=</span> <span class="sh">'</span><span class="s">No file part in request.</span><span class="sh">'</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">file</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">files</span><span class="p">[</span><span class="sh">'</span><span class="s">file</span><span class="sh">'</span><span class="p">]</span>
            <span class="k">if</span> <span class="nb">file</span><span class="p">.</span><span class="n">filename</span> <span class="o">==</span> <span class="sh">''</span><span class="p">:</span>
                <span class="n">message</span> <span class="o">=</span> <span class="sh">'</span><span class="s">No file selected.</span><span class="sh">'</span>
            <span class="k">elif</span> <span class="nb">file</span> <span class="ow">and</span> <span class="nf">allowed_file</span><span class="p">(</span><span class="nb">file</span><span class="p">.</span><span class="n">filename</span><span class="p">):</span>
                <span class="n">filename</span> <span class="o">=</span> <span class="nf">secure_filename</span><span class="p">(</span><span class="nb">file</span><span class="p">.</span><span class="n">filename</span><span class="p">)</span>
                <span class="n">filepath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">UPLOAD_FOLDER</span><span class="sh">'</span><span class="p">],</span> <span class="n">filename</span><span class="p">)</span>
                <span class="nb">file</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
                <span class="n">message</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">File uploaded successfully: </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="sh">'</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">message</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Invalid file type.</span><span class="sh">'</span>
    <span class="k">return</span> <span class="nf">render_template_string</span><span class="p">(</span><span class="n">HTML_FORM</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="sh">'</span><span class="s">0.0.0.0</span><span class="sh">'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <p>GPT-5 is still allergic to type hints, but running this gives a nice web form to upload a video. Great! Not great when I consider that I’d have spent less time just coding it myself, but it’s workable. Let’s ask it for video streaming functionality now:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">VIDEO_PAGE</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Watching &lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;&lt;/h1&gt;
    &lt;video width=</span><span class="sh">"</span><span class="s">640</span><span class="sh">"</span><span class="s"> height=</span><span class="sh">"</span><span class="s">360</span><span class="sh">"</span><span class="s"> controls&gt;
      &lt;source src=</span><span class="sh">"</span><span class="s">/videos/</span><span class="sh">"</span><span class="s"> type=</span><span class="sh">"</span><span class="s">video/</span><span class="sh">"</span><span class="s">&gt;
      Your browser does not support the video tag.
    &lt;/video&gt;
    &lt;br&gt;&lt;br&gt;
    &lt;a href=</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="s">&gt;Back to upload page&lt;/a&gt;
  &lt;/body&gt;
&lt;/html&gt;
</span><span class="sh">"""</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
    <span class="n">message</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
        <span class="k">if</span> <span class="sh">'</span><span class="s">file</span><span class="sh">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">request</span><span class="p">.</span><span class="n">files</span><span class="p">:</span>
            <span class="n">message</span> <span class="o">=</span> <span class="sh">'</span><span class="s">No file part in request.</span><span class="sh">'</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">file</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">files</span><span class="p">[</span><span class="sh">'</span><span class="s">file</span><span class="sh">'</span><span class="p">]</span>
            <span class="k">if</span> <span class="nb">file</span><span class="p">.</span><span class="n">filename</span> <span class="o">==</span> <span class="sh">''</span><span class="p">:</span>
                <span class="n">message</span> <span class="o">=</span> <span class="sh">'</span><span class="s">No file selected.</span><span class="sh">'</span>
            <span class="k">elif</span> <span class="nb">file</span> <span class="ow">and</span> <span class="nf">allowed_file</span><span class="p">(</span><span class="nb">file</span><span class="p">.</span><span class="n">filename</span><span class="p">):</span>
                <span class="n">filename</span> <span class="o">=</span> <span class="nf">secure_filename</span><span class="p">(</span><span class="nb">file</span><span class="p">.</span><span class="n">filename</span><span class="p">)</span>
                <span class="n">filepath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">UPLOAD_FOLDER</span><span class="sh">'</span><span class="p">],</span> <span class="n">filename</span><span class="p">)</span>
                <span class="nb">file</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
                <span class="n">message</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="s">File uploaded successfully: </span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="sh">'</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">message</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Invalid file type.</span><span class="sh">'</span>

    <span class="n">videos</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">UPLOAD_FOLDER</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">render_template_string</span><span class="p">(</span><span class="n">HTML_TEMPLATE</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="n">message</span><span class="p">,</span> <span class="n">videos</span><span class="o">=</span><span class="n">videos</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/watch/&lt;filename&gt;</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">watch_video</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">UPLOAD_FOLDER</span><span class="p">,</span> <span class="n">filename</span><span class="p">)):</span>
        <span class="nf">abort</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
    <span class="n">ext</span> <span class="o">=</span> <span class="n">filename</span><span class="p">.</span><span class="nf">rsplit</span><span class="p">(</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">lower</span><span class="p">()</span>
    <span class="k">return</span> <span class="nf">render_template_string</span><span class="p">(</span><span class="n">VIDEO_PAGE</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="n">filename</span><span class="p">,</span> <span class="n">ext</span><span class="o">=</span><span class="n">ext</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/videos/&lt;filename&gt;</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">serve_video</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">UPLOAD_FOLDER</span><span class="p">,</span> <span class="n">filename</span><span class="p">)):</span>
        <span class="nf">abort</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">send_from_directory</span><span class="p">(</span><span class="n">UPLOAD_FOLDER</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</code></pre></div></div> <p>Alright. To be honest, this is already a pain to read, and I really don’t like its copious use of the <code class="language-plaintext highlighter-rouge">os</code> module here, but running it gives a working video streamer.</p> <hr/> <h2 id="bookmarks-and-cracks-in-the-manhattan-project">Bookmarks and Cracks in the Manhattan Project</h2> <p>Right now, the Manhattan Project is relying on native video streaming as a crutch. Lets see what happens when I ask for custom functionality, like bookmarking a timestamp on a video:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">BOOKMARK_FILE</span><span class="p">):</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">BOOKMARK_FILE</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">bookmarks</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">bookmarks</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">def</span> <span class="nf">save_bookmarks</span><span class="p">():</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">BOOKMARK_FILE</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">bookmarks</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/bookmark/&lt;filename&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">add_bookmark</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">UPLOAD_FOLDER</span><span class="p">,</span> <span class="n">filename</span><span class="p">)):</span>
        <span class="nf">abort</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
    <span class="n">ts</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">time</span><span class="sh">'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">label</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">Bookmark at </span><span class="si">{</span><span class="n">ts</span><span class="si">}</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">ts</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">bookmarks</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">time</span><span class="sh">"</span><span class="p">:</span> <span class="n">ts</span><span class="p">,</span> <span class="sh">"</span><span class="s">label</span><span class="sh">"</span><span class="p">:</span> <span class="n">label</span><span class="p">})</span>
        <span class="nf">save_bookmarks</span><span class="p">()</span>
    <span class="k">return</span> <span class="sh">''</span><span class="p">,</span> <span class="mi">204</span>
</code></pre></div></div> <p>For starters, it added functionality to read bookmarks from a file, which I never asked for. GPT-5 has also used this check:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">UPLOAD_FOLDER</span><span class="p">,</span> <span class="n">filename</span><span class="p">)):</span>
        <span class="nf">abort</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
</code></pre></div></div> <p>three times in the code now, without making it its own function. Annoying to read, but not critical.</p> <p>Finally, I asked these bookmarks to be visible on the video stream itself. This is where GPT-5 started to falter: the bookmark’s placements did not match up with the video’s timeline.</p> <p><img src="/assets/img/gptwhy.png" alt=""/></p> <p>I decided to call it here, since the Manhattan Project started showing critical issues.</p> <p>Unfortunately, I’m still not convinced vibe coding is the future. The code GPT-5 outputted was functional, but messy and poorly designed. Prompting it and influencing it to give me the correct code took significantly more time than if I was trying to code this myself. Sorry, LinkedIn, I think I’ll keep my job for the foreseeable future.</p>]]></content><author><name></name></author><category term="programming"/><category term="ai"/><summary type="html"><![CDATA[vibe coding, and Plato's allegory of the cave]]></summary></entry></feed>